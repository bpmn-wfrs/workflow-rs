// @generated by protobuf-ts 2.9.1 with parameter long_type_string,optimize_code_size
// @generated from protobuf file "wfrs.proto" (package "wfrs", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Workflow } from "./wfrs";
import type { ListenResponse } from "./wfrs";
import type { ListenRequest } from "./wfrs";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { CompleteResponse } from "./wfrs";
import type { CompleteRequest } from "./wfrs";
import type { UpdateResponse } from "./wfrs";
import type { UpdateRequest } from "./wfrs";
import type { CreateResponse } from "./wfrs";
import type { CreateRequest } from "./wfrs";
import type { ListResponse } from "./wfrs";
import type { ListRequest } from "./wfrs";
import type { IsSyncResponse } from "./wfrs";
import type { IsSyncRequest } from "./wfrs";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { OptLoadResponse } from "./wfrs";
import type { LoadRequest } from "./wfrs";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service wfrs.Workflow
 */
export interface IWorkflowClient {
    /**
     * @generated from protobuf rpc: Load(wfrs.LoadRequest) returns (wfrs.OptLoadResponse);
     */
    load(input: LoadRequest, options?: RpcOptions): UnaryCall<LoadRequest, OptLoadResponse>;
    /**
     * @generated from protobuf rpc: IsSync(wfrs.IsSyncRequest) returns (wfrs.IsSyncResponse);
     */
    isSync(input: IsSyncRequest, options?: RpcOptions): UnaryCall<IsSyncRequest, IsSyncResponse>;
    /**
     * @generated from protobuf rpc: List(wfrs.ListRequest) returns (wfrs.ListResponse);
     */
    list(input: ListRequest, options?: RpcOptions): UnaryCall<ListRequest, ListResponse>;
    /**
     * @generated from protobuf rpc: Create(wfrs.CreateRequest) returns (wfrs.CreateResponse);
     */
    create(input: CreateRequest, options?: RpcOptions): UnaryCall<CreateRequest, CreateResponse>;
    /**
     * @generated from protobuf rpc: Update(wfrs.UpdateRequest) returns (wfrs.UpdateResponse);
     */
    update(input: UpdateRequest, options?: RpcOptions): UnaryCall<UpdateRequest, UpdateResponse>;
    /**
     * @generated from protobuf rpc: Complete(wfrs.CompleteRequest) returns (wfrs.CompleteResponse);
     */
    complete(input: CompleteRequest, options?: RpcOptions): UnaryCall<CompleteRequest, CompleteResponse>;
    /**
     * @generated from protobuf rpc: Listen(wfrs.ListenRequest) returns (stream wfrs.ListenResponse);
     */
    listen(input: ListenRequest, options?: RpcOptions): ServerStreamingCall<ListenRequest, ListenResponse>;
}
/**
 * @generated from protobuf service wfrs.Workflow
 */
export class WorkflowClient implements IWorkflowClient, ServiceInfo {
    typeName = Workflow.typeName;
    methods = Workflow.methods;
    options = Workflow.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Load(wfrs.LoadRequest) returns (wfrs.OptLoadResponse);
     */
    load(input: LoadRequest, options?: RpcOptions): UnaryCall<LoadRequest, OptLoadResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<LoadRequest, OptLoadResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: IsSync(wfrs.IsSyncRequest) returns (wfrs.IsSyncResponse);
     */
    isSync(input: IsSyncRequest, options?: RpcOptions): UnaryCall<IsSyncRequest, IsSyncResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<IsSyncRequest, IsSyncResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: List(wfrs.ListRequest) returns (wfrs.ListResponse);
     */
    list(input: ListRequest, options?: RpcOptions): UnaryCall<ListRequest, ListResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListRequest, ListResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Create(wfrs.CreateRequest) returns (wfrs.CreateResponse);
     */
    create(input: CreateRequest, options?: RpcOptions): UnaryCall<CreateRequest, CreateResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateRequest, CreateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Update(wfrs.UpdateRequest) returns (wfrs.UpdateResponse);
     */
    update(input: UpdateRequest, options?: RpcOptions): UnaryCall<UpdateRequest, UpdateResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateRequest, UpdateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Complete(wfrs.CompleteRequest) returns (wfrs.CompleteResponse);
     */
    complete(input: CompleteRequest, options?: RpcOptions): UnaryCall<CompleteRequest, CompleteResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<CompleteRequest, CompleteResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Listen(wfrs.ListenRequest) returns (stream wfrs.ListenResponse);
     */
    listen(input: ListenRequest, options?: RpcOptions): ServerStreamingCall<ListenRequest, ListenResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListenRequest, ListenResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
